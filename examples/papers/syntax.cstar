//Auto importing with involved. this means all standard libraries which needed by this unit to be imported, will be imported by automatically
package involved {
    'ML',
    'X', //sin -> X.sin
    'Y', //sin -> Y.sin
}

// also particularly we can import a package or even only a function from it as well
package {
    "std:math"
    "std:math:cos"
}

// PI is acting like a constant but just a symbol
package "std:math:PI" as PI 
//is equal to
package "std:math" as math
const int32 PI = math.PI;

// Linkage and storage syntax in C*
//those are identical since if there is no return type operator exist on the function, compiler treats like 
//its type is void
import callMe(int8 x,bool y) :: void; 
import callMe(int8 x,bool y);
import {
    callMe(int x8,bool y);
    dontCallMe(int32 x,int64 y);
}
import glClearColor(float r,float g,float b,float a) :: void from "opengl32.lib";
import from "myLibrary.lib" {
    printf(char*) :: void;
    callMe() :: void;
}

//float is automatically replaced by float64 or float32 which depends on the system architecture flag
export area<Circle>(float x,float y) :: float32;
export sin(float64 x) :: float64 from "std:math";
export from "std:math" {
    abs(int32 x) :: int32;
    fabs(float32 x) :: float32;
}

//This is the way of using features of Metaprogramming..
attribute Area<T> {
    area($0,$1) -> T match {
        'Triangle': $0 * $1 / 2,
        'Square': $0 * $1,
        _: cterror("no this is not valid type")
    }
}

attribute Area<Circle> {
    area($0) -> 2 * math.PI * $0;
}

//meta types for reflectivity
attribute IsRef<T> {
    is_ref($0) -> std.meta_ref($0);
}


//Classic macro needs
macro print(str) {
    std.out(str)
}

macro triangle_area(x,y) {
    x * y / 2;
}

macro unique_vec(expr){
    vector^ temp_vec = vector();
    loop(i in expr){
        temp_vec.push(i)
    }
    ret temp_vec;
}


//Attributing functions from Area (this is like an interface but not exactly interface...)
prototype Shape<T> from Area<T> { 
    float32 x;
    float32 y;
    float32 _z; // private
 
    constructor() { 
    } 

    //if there is no parameters, we can write the function in three different ways
    area() :: void {}
    area :: void {}
    area() {} 
    area {

    }

    area<Square>(int x,int y) :: float32;
    area<Triangle>(float32 x,float32 y) :: float32;

    cast_is_not_possible(x bool,bool y) :: void {
        // it's legal and not breaking PTD (primitive type domination) rule
        int32 a = x; // but still illegal implicit casting since 'x bool' semantically dictate that you can't cast this parameter in this whole scope
                     // ? maybe we can use this for preventing to cast that would be occured by the compiler
        int32 b = y; // but this is legal since there is no restriction semantically since 'bool y'.
    }
}

//This is inheritance just like in OOP (so the Triangle prototype is inheriting the Shape prototype)
//prototypes are like classes but they are more powerful than classes and concept of behind it.
//with a prototype, you can also create new primitive types for your needs and customize them
//with attributes and traits. traits are using when if there's common and shared features between
//prototypes. in that way your prototypes has not to be derived from each other possibly. and also
//traits offers a strong type checking and flexibility with some equalities features(https://en.wikipedia.org/wiki/Partial_equivalence_relation)
//just like in Rust and C++ but maybe in the better and stronger ways.
prototype Triangle(Shape) {

}

a_func(int32, int); 


enum Colors {
	RED(int32),
	GREEN(const char*),
	BLUE(int32)
}

//enum can derive from a prototype
//that means Colors will be acting like a enum but it will be 
//also a struct which has only member variables of the base prototype it derived from.1
enum Colors(Triangle) {
	
}


example(int32& by_ref) :: void {

}

example1(constref int32& by_ref) :: void {

}

// This means passed by address which holds by an unique pointer (it had moved probably) 
// and its ownership had been transfered and it's not able to be shared with
// another pointer since it's an unique ptr but you can move it by move or assignment-move
// but in some cases, you don't wanna let to be passed a moveable unique_ptr 
// to the function itself as a param. In this cases you can use nomove qualifier
// so by this qualifier compiler will be complaining that this passed pointer as moveable unique ptr.
// example2(nomove constptr int32^ ptr) 
// 
// also if the unique_ptr passed as constptr 
// it means it cannot be moved during entire the function scope
// but this is semantically a lit bit awkward since when 
// you moved your unique ptr and its lifetime 
// to be limited function's scope. but in some rare cases
// it'll be good to have.
example2(constptr int32^ ptr) :: any {
    //this is not possible because ^ pointers are can't be shared
    //int32^ movedHere = ptr;

    //you can move like
    int32^ movedHere = move ptr;
    //or
    int32^ movedHere2 := ptr;
    // this is ':=' usually using as type inf in the other languages but we don't have a feature like type inf

}

example3(int32^ ptr) :: any {
} 


//This means pass by address that shareable pointer but it can't be changed
//and it can have many ownerships which is able to be shared with
//another pointer and it can be moved but not allowed by constptr
example4(constptr int32* ptr) :: any {
    int32* sharedHere = ptr;

    //not possible
    //sharedHere = Triangle(); 
}

//This means pass by address that shareable pointer but it can't be changed
//and it can have many ownerships which is able to be shared with
//another pointer and it can be moved since *
//when shareable pointer moved, previous pointer will be nil.. and counter does not increase
example5(int32* ptr) :: any {
    int32* sharedHere = ptr;
    sharedHere = Triangle(); 
}


example6(readonly char* str) async ::  any {
    bool success = await a_function_must_be_awaited();
    ret success ? str : "not succeded!";
}


//built-in directive which'll be called while compiling the source code
@compiler_hook()
__greater_than_hook() :: void {

}



//This is directive defination here. It can take param or not.
//Depends on what it'll do. If need to take params then must be matched
//all params with the target function 
#this_function_may_throw_an_error(bool a_param) {
    //$func, $line,, $col,
    // this means function will be copied here
    $func(a_param)::onexcept{
        print("has thrown an error by function" + $func::name + " " + $line + " " + $col);
    }::noexcept{

    };
}

#pretend_integer_overflow -> k_of {

}

//this is directive and can be used for functions or variables.
//they are able to wrap the function or variable that qualified.
//it's a thing between macro and try-catch statements. they can
//expand and run on the run time.
@this_function_may_throw_an_error
example7(bool a_param) except :: int32 {
    // integer overflow occures but can be handled by compiler
    // note: k_of is a one-dim char pointer which is providing string base pointer of result just performed.
    // 'safe_add' is a macro which is declared by standard library as a helper. It's making sum operations 
    // based on string simply.
    @pretend_integer_overflow -> k_of 
    int k = 1000000000000000000000 + 10000000000000000000000000000000000000; 
    if(null(k_of)) {
        safe_add(k_of, 10); 
        print(k_of);
    } else {
        print(k);
        throw;
    } 
}

main() :: int32 {
    int32 x = 30;
    int32* p = ref x;
    x = deref p;

    //unsafe cast is trying to save ur ass from trouble with type conversions like uint32 -> int32
    uint32 a = 1233;
    int32 p = a; // this will be a stupid assignment here
    int32 l = unsafe_cast<int32>(a); // it tries to understand what to do and helps implicitly if it can (2's complement)
    float32 f = 12.3453;
    int32 r = f; //implicitly casting
    Shape^ shape = Triangle(); 
    Triangle^ triangle = cast<Triangle^>(shape);
    
    //move it (transfer ownership) to the left side.
    Shape^ anotherShape := shape; 
    //or maybe
    Shape^ anotherShape2 = move anotherShape;

    const Shape^ ptr = Triangle(); // the address is not constant and the value it holds cannot be changed.
    constptr Shape^ ptr = Triangle(); // the address is constant but the value it holds can be changed.
    readonly Shape^ ptr = Triangle(); // the address and the value are constant and this is readonly.

    //for stack-kind variables.
    const Shape shape;
    //constptr Shape shape; this is wrong since Shape is not a pointer-type variable
    //readonly Shape shape; this is wrong since Shape is not a pointer-type variable

    if(x == 10) {

    } elif (x > 10) {

    } else {

    }

    ifnot(x == 10) {

    }


    loop(true) {

    }

    int32 arr[4] = (0,1,2,3)
    loop(v in arr) {
        print(v)
    } 

    //by index
    loop(i,v in arr){
        print(i,v)
    }

    //by index and address p -> pointer -> address
    loop(i,v,p in arr){
        print(i,v,p)
    }

    int32 k = 1;
    option(k) {
        0: {
        
        },
        1: {

        },
        2: {

        },
        3: {

        },
        _: {

        }
    }

    ret 0;
}
