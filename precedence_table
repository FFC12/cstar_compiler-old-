int k = 20 + (10 * 2 + k) - 23 & 0xFF + sizeof(x) + cast<uint>(x);


expression stack machine

stack => [ '20'  '+'        '('     '10'      '*'       '2'         '+'         'k'        ')'      '-'         '23'        '&'         '0xFF' ]  
           -1  (-2,13,2) (-3,0,1)   -4    (-5,11,2)    -6       (-7,13,2)      -8       (-9,0,1)   (-10,13,2)    -11      (-12,6,2)       -13

vals = [20,10,2,k,23,0xFF]  
op   = []


uint p = 20;
int r = -1 * cast<int>(sizeof(uint));  


stack = [ '-1'  '*'  'cast<int>' '(' 'sizeof' '(' 'uint' ')' ')' ]
                        |               |
                    1 thing           1 thing
                    advance expr    advance expr                     

vals = [-1, uint]
op   = [*, cast<int>, sizeof ]
op_s = [sizeof, cast<int>, *]

0 = sizeof 
        |
        +---> Expr(uint)

1 = cast<int>
        |
        +---> Expr(0)

2 = *
    |
    +---> Expr(1,Expr(1))

---------------------------

uint p = 20;
int r = -1 + func(10) * cast<int>(sizeof(uint)) + *i + &k + s[*p++];   

stack = [ '-1' '+' 'func(10)' '*'  'cast<int>' '(' 'sizeof' '(' 'uint' ')' ')' '+' '*' 'i' '+' '&' 'k' '+' 's' '[' '*' 'p' '++' ']' ]
                        |               |
                    1 thing           1 thing
                    advance expr    advance expr                     

vals = [-1, uint, i, k, s, p ]
op   = [*,+,func(10), cast<int>, sizeof, +, *, &, +, [, *, ++ , ] ]
op_s = [sizeof, cast<int>, *]
		
0 = sizeof 
        |
        +---> Expr(uint)
		
1 = cast<int>
        |
        +---> Expr(0)
		
2 = *
    |
    +---> Expr(1,Expr(1))
		
1 - create a bucket which holds all the tokens in order
2 - determine assoc of type and also precedence level for each operator (check is it binary op or not?)
3 - extract values into another list
4 - process subexpressions if any and go to step 1
5 - sort operators by precedence
6 - advance each operator and build an AST for the expression


